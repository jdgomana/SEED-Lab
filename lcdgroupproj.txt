import smbus2
import time
import queue
import threading
from random import choice
from time import sleep

q = queue.Queue()

# ============================================
# LCD CONFIGURATION
# ============================================
I2C_ADDR = 0x20   # Adjust for your LCD address
LCD_WIDTH = 16
LCD_CHR = 1
LCD_CMD = 0
LCD_LINE_1 = 0x80
LCD_LINE_2 = 0xC0
ENABLE = 0b00000100

# Timing constants
E_PULSE = 0.0005
E_DELAY = 0.0005

# Initialize I2C bus
bus = smbus2.SMBus(1)

# ============================================
# LCD FUNCTIONS
# ============================================
def lcd_init():
    """Initialize display."""
    lcd_byte(0x33, LCD_CMD)
    lcd_byte(0x32, LCD_CMD)
    lcd_byte(0x06, LCD_CMD)
    lcd_byte(0x0C, LCD_CMD)
    lcd_byte(0x28, LCD_CMD)
    lcd_byte(0x01, LCD_CMD)
    time.sleep(E_DELAY)

def lcd_byte(bits, mode):
    """Send byte to data pins."""
    high_bits = mode | (bits & 0xF0) | 0x08
    low_bits  = mode | ((bits << 4) & 0xF0) | 0x08
    bus.write_byte(I2C_ADDR, high_bits)
    lcd_toggle_enable(high_bits)
    bus.write_byte(I2C_ADDR, low_bits)
    lcd_toggle_enable(low_bits)

def lcd_toggle_enable(bits):
    """Toggle enable pin."""
    time.sleep(E_DELAY)
    bus.write_byte(I2C_ADDR, (bits | ENABLE))
    time.sleep(E_PULSE)
    bus.write_byte(I2C_ADDR, (bits & ~ENABLE))
    time.sleep(E_DELAY)

def lcd_string(message, line):
    """Display string on LCD."""
    message = message.ljust(LCD_WIDTH, " ")
    lcd_byte(line, LCD_CMD)
    for i in range(LCD_WIDTH):
        lcd_byte(ord(message[i]), LCD_CHR)

# MARKER AND WHEEL LOGIC

def set_wheel_goals(marker_quadrant):
    """
    Returns (left_wheel, right_wheel) goal values
    based on the marker's visible image quadrant.
    """
    logic_table = {
        "NE": (0, 0),
        "NW": (0, 1),
        "SW": (1, 1),
        "SE": (1, 0)
    }
    return logic_table.get(marker_quadrant, (None, None))

# THREAD FUNCTION: LCD UPDATER
def lcd_update_thread():
    """Thread to update the LCD display when new data arrives in the queue."""
    lcd_init()
    lcd_string("System Initializing", LCD_LINE_1)
    time.sleep(2)

    while True:
        if not q.empty():
            marker_quadrant = q.get()
            left_goal, right_goal = set_wheel_goals(marker_quadrant)

            # Update LCD
            lcd_string(f"Marker: {marker_quadrant}", LCD_LINE_1)
            lcd_string(f"Goal Pos: {left_goal} {right_goal}", LCD_LINE_2)

        time.sleep(0.1)

# MAIN PROGRAM 
def main():
    # Start LCD thread
    myThread = threading.Thread(target=lcd_update_thread, daemon=True)
    myThread.start()


# PROGRAM ENTRY POINT
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        lcd_byte(0x01, LCD_CMD)  # Clear LCD on exit
        print("\nProgram terminated.")
